import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:mockito/annotations.dart';
import 'package:fitlife/features/authentication/service/auth_service.dart';
import 'package:fitlife/features/authentication/view/pages/forgot_password_page.dart';
import 'package:fitlife/features/authentication/viewmodel/auth_validation_viewmodel.dart';
import 'package:fitlife/features/authentication/viewmodel/auth_view_model.dart';
import 'package:provider/provider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// Generate mock classes
@GenerateMocks([AuthService])
// TODO: Uncomment after running build_runner
// import 'password_reset_test.mocks.dart'; // This will be generated by build_runner

class MockAuthService extends Mock implements AuthService {}

void main() {
  group('ForgotPasswordPage UI Tests', () {
    testWidgets('ForgotPasswordPage has email field and submit button',
        (WidgetTester tester) async {
      // Build our app and trigger a frame
      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: ForgotPasswordPage(),
          ),
        ),
      );

      // Verify that our UI contains the expected widgets
      expect(find.byType(TextFormField), findsOneWidget); // Email field
      expect(find.byType(ElevatedButton), findsWidgets); // Submit button
      expect(find.text('Forgot Password'), findsOneWidget);
      expect(find.text('Back to Login'), findsOneWidget);
    });

    testWidgets(
        'ForgotPasswordPage navigates back to login page when link is tapped',
        (WidgetTester tester) async {
      // Build our app and trigger a frame
      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: ForgotPasswordPage(),
          ),
        ),
      );

      // Tap the back to login link
      await tester.tap(find.text('Back to Login'));
      await tester.pumpAndSettle();

      // Verify navigation (this will depend on your navigation implementation)
      // For example, if you're using named routes:
      // expect(find.byType(LoginPage), findsOneWidget);
    });
  });

  group('Password Reset Validation Tests', () {
    late AuthValidationViewModel validationViewModel;

    setUp(() {
      validationViewModel = AuthValidationViewModel();
    });

    test('Email validation returns error for empty email', () {
      final result = validationViewModel.validateEmail('');
      expect(result, 'Email cannot be empty');
    });

    test('Email validation returns error for invalid email format', () {
      final result = validationViewModel.validateEmail('invalid-email');
      expect(result, 'Please enter a valid email');
    });

    test('Email validation returns null for valid email', () {
      final result = validationViewModel.validateEmail('test@example.com');
      expect(result, null);
    });

    test('Password validation returns error for empty password', () {
      final result = validationViewModel.validatePassword('');
      expect(result, 'Password cannot be empty');
    });

    test('Password validation returns error for short password', () {
      final result = validationViewModel.validatePassword('pass');
      expect(result, 'Password must be at least 8 characters');
    });

    test('Password validation returns null for valid password', () {
      final result = validationViewModel.validatePassword('Password123!');
      expect(result, null);
    });
  });

  group('Password Reset Authentication Tests', () {
    late MockAuthService mockAuthService;

    setUp(() {
      mockAuthService = MockAuthService();
    });

    test(
        'Forgot password with valid email calls auth service and returns success',
        () async {
      // Arrange
      final email = 'test@example.com';

      when(mockAuthService.forgotPassword(email)).thenAnswer((_) async =>
          {'success': true, 'message': 'Password reset code sent'});

      // Act
      final result = await mockAuthService.forgotPassword(email);

      // Assert
      verify(mockAuthService.forgotPassword(email)).called(1);
      expect(result['success'], true);
    });

    test('Verify password reset code with valid code returns success',
        () async {
      // Arrange
      final email = 'test@example.com';
      final code = '123456';

      when(mockAuthService.verifyPasswordResetCode(email, code)).thenAnswer(
          (_) async => {'success': true, 'message': 'Code verified'});

      // Act
      final result = await mockAuthService.verifyPasswordResetCode(email, code);

      // Assert
      verify(mockAuthService.verifyPasswordResetCode(email, code)).called(1);
      expect(result['success'], true);
    });

    test('Reset password with valid data returns success', () async {
      // Arrange
      final email = 'test@example.com';
      final code = '123456';
      final newPassword = 'NewPassword123!';

      when(mockAuthService.resetPassword(email, code, newPassword)).thenAnswer(
          (_) async =>
              {'success': true, 'message': 'Password reset successful'});

      // Act
      final result =
          await mockAuthService.resetPassword(email, code, newPassword);

      // Assert
      verify(mockAuthService.resetPassword(email, code, newPassword)).called(1);
      expect(result['success'], true);
    });

    testWidgets(
        'Password reset form submission with valid email calls forgot password service',
        (WidgetTester tester) async {
      // This test would require more complex setup with Provider or Riverpod
      // For now, we'll use a placeholder test
      expect(true, isTrue);
    });
  });
}
