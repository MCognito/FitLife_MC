// Mocks generated by Mockito 5.4.5 from annotations
// in fitlife/test/library/library_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fitlife/features/library/models/library_item.dart' as _i2;
import 'package:fitlife/features/library/service/library_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLibraryItem_0 extends _i1.SmartFake implements _i2.LibraryItem {
  _FakeLibraryItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LibraryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibraryService extends _i1.Mock implements _i3.LibraryService {
  MockLibraryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.LibraryItem>> getLibraryItems() =>
      (super.noSuchMethod(
            Invocation.method(#getLibraryItems, []),
            returnValue: _i4.Future<List<_i2.LibraryItem>>.value(
              <_i2.LibraryItem>[],
            ),
          )
          as _i4.Future<List<_i2.LibraryItem>>);

  @override
  _i4.Future<List<_i2.LibraryItem>> getLibraryItemsByCategory(
    String? category,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLibraryItemsByCategory, [category]),
            returnValue: _i4.Future<List<_i2.LibraryItem>>.value(
              <_i2.LibraryItem>[],
            ),
          )
          as _i4.Future<List<_i2.LibraryItem>>);

  @override
  _i4.Future<_i2.LibraryItem> addLibraryItem(_i2.LibraryItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#addLibraryItem, [item]),
            returnValue: _i4.Future<_i2.LibraryItem>.value(
              _FakeLibraryItem_0(
                this,
                Invocation.method(#addLibraryItem, [item]),
              ),
            ),
          )
          as _i4.Future<_i2.LibraryItem>);
}
